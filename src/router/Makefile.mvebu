#
# Broadcom Linux Router Makefile
#
# Copyright 2001-2003, Broadcom Corporation
# All Rights Reserved.
#
# THIS SOFTWARE IS OFFERED "AS IS", AND BROADCOM GRANTS NO WARRANTIES OF ANY
# KIND, EXPRESS OR IMPLIED, BY STATUTE, COMMUNICATION OR OTHERWISE. BROADCOM
# SPECIFICALLY DISCLAIMS ANY IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A SPECIFIC PURPOSE OR NONINFRINGEMENT CONCERNING THIS SOFTWARE.
#
# $Id: Makefile,v 1.2 2005/09/26 11:06:58 seg Exp $
#

include .config
ifneq ($(wildcard ../cy_conf.mak),)
  include ../cy_conf.mak
endif

#
# Paths
#
OPENSER_MODULES := sl tm rr maxfwd usrloc registrar dbtext textops exec auth auth_db nathelper
OPENSER_MODULE_FILES := $(foreach module,$(OPENSER_MODULES),openser/modules/$(module)/$(module).so)
OPENSSL_NO_CIPHERS:= no-idea no-md2 no-mdc2 no-rc5 no-sha0 no-rmd160 no-aes192
OPENSSL_OPTIONS:= shared no-ec no-err no-fips no-hw no-krb5 no-threads zlib-dynamic

# Source bases

export PLATFORM LINUXDIR LIBDIR USRLIBDIR
export TOP := $(shell pwd)
export SRCBASE := $(shell (cd $(TOP)/.. && pwd -P))


# Set the HAL directory if you have the HAL sources

# Set the Atheros Rate Control directory if you have the proprietary rate control
export ATH_RATE=ath_rate/sample

#
# Cross-compile environment variables
#

# Build platform
export BUILD := i386-pc-linux-gnu
export HOSTCC := gcc

# uClibc wrapper
export ARCH:=$(PLATFORM)
ifeq ($(CONFIG_UCLIBC),y)
export PLATFORM := $(PLATFORM)-uclibc
endif


export KERNELRELEASE = $(shell cat $(LINUXDIR)/include/config/kernel.release 2> /dev/null)


export CROSS_COMPILE := $(ARCH)-linux-uclibc-
export CONFIGURE := ./configure openwrt-linux --build=$(BUILD)
export TOOLCHAIN := $(shell cd $(dir $(shell which $(CROSS_COMPILE)gcc))/arm-openwrt-linux && pwd -P)



export BASEOPT:=-Os -fno-unwind-tables -fno-asynchronous-unwind-tables


#ifeq ($(ARCH),arm)
#export COPTS:=$(BASEOPT) -pipe -march=armv7-a -mtune=cortex-a9  -mfloat-abi=soft -fpic
ifeq ($(CONFIG_ARMADAXP),y)
export COPTS:=$(BASEOPT) -pipe  -mcpu=cortex-a9 -mtune=cortex-a9 -mfpu=vfpv3-d16 -fno-caller-saves -fno-plt -ffast-math -funsafe-math-optimizations -fcommon -ftree-vectorize -ftree-vectorizer-verbose=2 -fopt-info-vec -mvectorize-with-neon-quad
else
export COPTS:=$(BASEOPT) -pipe  -mcpu=cortex-a9 -mtune=cortex-a9 -mfpu=neon-vfpv3 -fno-caller-saves -fno-plt -ffast-math -funsafe-math-optimizations -fcommon -ftree-vectorize -ftree-vectorizer-verbose=2 -fopt-info-vec -mvectorize-with-neon-quad
endif


export CC := ccache $(CROSS_COMPILE)gcc
export CXX := ccache $(CROSS_COMPILE)g++
export AR := $(CROSS_COMPILE)gcc-ar
export AS := $(CROSS_COMPILE)as
export LD := $(CROSS_COMPILE)ld
export NM := $(CROSS_COMPILE)gcc-nm
export RANLIB := $(CROSS_COMPILE)gcc-ranlib
export STRIP := $(CROSS_COMPILE)strip
export SIZE := $(CROSS_COMPILE)size

export CFLAGS := $(COPTS) 
#export LTOFIXUP := -fno-fat-lto-objects -fno-devirtualize

#
# Install and target directories
#

export PLATFORMDIR := $(TOP)/$(PLATFORM)
export INSTALLDIR := $(PLATFORMDIR)/install
export TARGETDIR := $(PLATFORMDIR)/target

#
# Configuration
#
CONFIG_IPTABLES=y
CONFIG_MUSL=y
#CONFIG_NOOPT=y

include rules/configs.mk

obj-clean := $(foreach obj,$(obj-y) $(obj-n),$(obj)-clean)
obj-install := $(foreach obj,$(obj-y),$(obj)-install)
obj-distclean := $(foreach obj,$(obj-y) $(obj-n),$(obj)-distclean)

all: install_headers build_date clean_target $(obj-y) $(LINUXDIR)/.config kernel

build_date:
	echo "#define BUILD_DATE \"$(shell date +%D)\"" > ../../opt/build.h 
	echo "CONFIG_MUSL=y" >> .config 

include kernel-features.mk
include common.mk

kernel:
	cp $(LINUXDIR)/.config_mvebu $(LINUXDIR)/.config
ifeq ($(CONFIG_ARMADAXP),y)
	echo "CONFIG_ARMADAXP=y" >> $(LINUXDIR)/.config
	sed -i 's/\# CONFIG_ARMADAXP is not set/CONFIG_ARMADAXP=y/g' $(LINUXDIR)/.config
else
	echo "# CONFIG_ARMADAXP is not set" >> $(LINUXDIR)/.config
	sed -i 's/CONFIG_ARMADAXP=y/\# CONFIG_ARMADAXP is not set/g' $(LINUXDIR)/.config
endif
	
	$(kernelfeatures)
	$(MAKE) -C $(LINUXDIR) oldconfig	
	$(MAKE) -f Makefile.mvebu kernel-relink-prep MAKEEXT=mvebu
	$(MAKE) -f Makefile.mvebu kernel-relink MAKEEXT=mvebu KBUILD_TARGETS="zImage dtbs"
	


install package: clean_target $(filter-out lib.$(ARCH)-install,$(obj-install)) $(LINUXDIR)/.config
        # Install binaries into target directory
	install -d $(TARGETDIR)
	for dir in $(wildcard $(patsubst %,$(INSTALLDIR)/%,$(obj-y))) ; do \
	    (cd $${dir} && tar cpf - .) | (cd $(TARGETDIR) && tar xpf -) \
	done
	mkdir -p $(ARCH)-uclibc/target/etc/config
	mkdir -p $(ARCH)-uclibc/target/etc/kaid
	mkdir -p $(ARCH)-uclibc/target/etc/langpack
	-cp ../../opt/bin/bootstrap $(ARCH)-uclibc/target/bin
#	cp ../../opt/bin/functions.sh $(ARCH)-uclibc/target/lib
	-cp ../../opt/bin/ddup $(ARCH)-uclibc/target/bin
	cd  $(ARCH)-uclibc/target/lib
	cp ./opt/etc/config/* $(ARCH)-uclibc/target/etc/config
	cp ./opt/usr/lib/smb.conf $(ARCH)-uclibc/target/usr/lib
	#ln -sf ../tmp/smbshare $(ARCH)-uclibc/target/www/smb
	# optimize the others library by removing unneeded symbols
	$(MAKE) -f Makefile.mvebu optimize-lib
	# Install modules into filesystem
	if grep -q "CONFIG_MODULES=y" $(LINUXDIR)/.config ; then \
	    $(MAKE) -C $(LINUXDIR) modules_install DEPMOD=/bin/true INSTALL_MOD_PATH=$(TARGETDIR) ; \
	fi
ifeq ($(CONFIG_MADWIFI),y)
	rm -rf $(TARGETDIR)/lib/modules/$(KERNELRELEASE)/kernel/drivers/net/wl
endif


ifneq ($(CONFIG_SAMBA),y)
	rm -rf $(TARGETDIR)/lib/modules/$(KERNELRELEASE)/kernel/fs/cifs
endif
	rm -f $(TARGETDIR)/lib/modules/$(KERNELRELEASE)/build
	rm -f $(TARGETDIR)/lib/modules/$(KERNELRELEASE)/source
        # Prepare filesystem
        # Make sure mksquashfs-2.0 is used
	cd $(TARGETDIR)  &&  find . -iname "CVS" | xargs rm -rf
	cd $(TARGETDIR)  &&  find . -iname ".svn" | xargs rm -rf

	find $(TARGETDIR)/lib/modules/$(KERNELRELEASE)/kernel -name *.ko -exec mv {} $(TARGETDIR)/lib/modules/$(KERNELRELEASE) \;
	-find $(TARGETDIR)/lib/modules/$(KERNELRELEASE)/net -name *.ko -exec mv {} $(TARGETDIR)/lib/modules/$(KERNELRELEASE) \;
	-find $(TARGETDIR)/lib/modules/$(KERNELRELEASE)/extra -name *.ko -exec mv {} $(TARGETDIR)/lib/modules/$(KERNELRELEASE) \;
	rm -rf $(TARGETDIR)/lib/modules/$(KERNELRELEASE)/kernel
	rm -rf $(TARGETDIR)/lib/modules/$(KERNELRELEASE)/net
	rm -rf $(TARGETDIR)/lib/modules/$(KERNELRELEASE)/extra
	#e2fsck -y -f $(ARCH)-uclibc/root.fs
	./busybox/examples/depmod.pl -F $(LINUXDIR)/System.map -b $(ARCH)-uclibc/target/lib/modules
#	tar --directory=$(TARGETDIR) --remove-files -cvvjf $(TARGETDIR)/etc/local.tar.bz2 usr/local
	rm -rf $(TARGETDIR)/usr/local
	mkdir $(TARGETDIR)/usr/local
	
	
ifeq ($(CONFIG_KAID),y)
	cp kaid/kaid $(TARGETDIR)/usr/sbin
endif
#	mv $(TARGETDIR)/usr/lib/services.so $(TARGETDIR)/lib
	export STRIP_KMOD="$(LINUXDIR)/scripts/strip-kmod.sh" && \
	export STRIP="$(TOP)/sstrip/sstrip -z" && \
	$(LINUXDIR)/scripts/rstrip.sh $(TARGETDIR)
	cd $(TARGETDIR) && $(TOP)/misc/rootprep.sh
	#mkdir $(TARGETDIR)/boot
	
	
	
	cp -fpR $(LINUXDIR)/arch/arm/boot//zImage $(ARCH)-uclibc/zImage; 
	#cp /home/bluebat/Openwrt/build_dir/target-arm_cortex-a9+vfpv3_uClibc-0.9.33.2_eabi/linux-mvebu/linux-3.14.27/arch/arm/boot/zImage $(ARCH)-uclibc/zImage; 
	-rm -rf $(ARCH)-uclibc/mvebu;
	-mkdir -p $(ARCH)-uclibc/mvebu;
	cp $(ARCH)-uclibc/zImage $(ARCH)-uclibc/zImage-armada-xp-db;
	cat $(LINUXDIR)/arch/arm/boot/dts//armada-xp-db.dtb >> $(ARCH)-uclibc/zImage-armada-xp-db;
	mkimage -A arm -O linux -T kernel -a 0x00008000 -C none -e 0x00008000 -n 'DD-WRT' -d $(ARCH)-uclibc/zImage-armada-xp-db $(ARCH)-uclibc/uImage-armada-xp-db;


	cp $(ARCH)-uclibc/uImage-armada-xp-db $(ARCH)-uclibc/mvebu/ddwrt-mvebu-uImage-armada-xp-db
	cp $(ARCH)-uclibc/zImage $(ARCH)-uclibc/zImage-armada-370-db
	cat $(LINUXDIR)/arch/arm/boot/dts//armada-370-db.dtb >> $(ARCH)-uclibc/zImage-armada-370-db
	mkimage -A arm -O linux -T kernel -a 0x00008000 -C none -e 0x00008000 -n 'DD-WRT' -d $(ARCH)-uclibc/zImage-armada-370-db $(ARCH)-uclibc/uImage-armada-370-db;


	cp $(ARCH)-uclibc/uImage-armada-370-db $(ARCH)-uclibc/mvebu/ddwrt-mvebu-uImage-armada-370-db
	cp $(ARCH)-uclibc/zImage $(ARCH)-uclibc/zImage-armada-xp-openblocks-ax3-4
	cat $(LINUXDIR)/arch/arm/boot/dts//armada-xp-openblocks-ax3-4.dtb >> $(ARCH)-uclibc/zImage-armada-xp-openblocks-ax3-4
	mkimage -A arm -O linux -T kernel -a 0x00008000 -C none -e 0x00008000 -n 'DD-WRT' -d $(ARCH)-uclibc/zImage-armada-xp-openblocks-ax3-4 $(ARCH)-uclibc/uImage-armada-xp-openblocks-ax3-4;


	cp $(ARCH)-uclibc/uImage-armada-xp-openblocks-ax3-4 $(ARCH)-uclibc/mvebu/ddwrt-mvebu-uImage-armada-xp-openblocks-ax3-4
	cp $(ARCH)-uclibc/zImage $(ARCH)-uclibc/zImage-armada-370-mirabox;
	cat $(LINUXDIR)/arch/arm/boot/dts//armada-370-mirabox.dtb >> $(ARCH)-uclibc/zImage-armada-370-mirabox;
	mkimage -A arm -O linux -T kernel -a 0x00008000 -C none -e 0x00008000 -n 'DD-WRT' -d $(ARCH)-uclibc/zImage-armada-370-mirabox $(ARCH)-uclibc/uImage-armada-370-mirabox;


	cp $(ARCH)-uclibc/uImage-armada-370-mirabox $(ARCH)-uclibc/mvebu/ddwrt-mvebu-uImage-armada-370-mirabox       
	cp $(ARCH)-uclibc/zImage $(ARCH)-uclibc/zImage-armada-370-rd
	cat $(LINUXDIR)/arch/arm/boot/dts//armada-370-rd.dtb >> $(ARCH)-uclibc/zImage-armada-370-rd
	mkimage -A arm -O linux -T kernel -a 0x00008000 -C none -e 0x00008000 -n 'DD-WRT' -d $(ARCH)-uclibc/zImage-armada-370-rd $(ARCH)-uclibc/uImage-armada-370-rd;


	cp $(ARCH)-uclibc/uImage-armada-370-rd $(ARCH)-uclibc/mvebu/ddwrt-mvebu-uImage-armada-370-rd         
	cp $(ARCH)-uclibc/zImage $(ARCH)-uclibc/zImage-armada-xp-gp;
	cat $(LINUXDIR)/arch/arm/boot/dts/armada-xp-gp.dtb >> $(ARCH)-uclibc/zImage-armada-xp-gp;
	mkimage -A arm -O linux -T kernel -a 0x00008000 -C none -e 0x00008000 -n 'DD-WRT' -d $(ARCH)-uclibc/zImage-armada-xp-gp $(ARCH)-uclibc/uImage-armada-xp-gp;
	cp $(ARCH)-uclibc/uImage-armada-xp-gp $(ARCH)-uclibc/mvebu/ddwrt-mvebu-uImage-armada-xp-gp


	cp $(ARCH)-uclibc/zImage $(ARCH)-uclibc/zImage-armada-xp-linksys-mamba;
	cat $(LINUXDIR)/arch/arm/boot/dts/armada-xp-linksys-mamba.dtb >> $(ARCH)-uclibc/zImage-armada-xp-linksys-mamba;
	mkimage -A arm -O linux -T kernel -a 0x00008000 -C none -e 0x00008000 -n 'DD-WRT' -d $(ARCH)-uclibc/zImage-armada-xp-linksys-mamba $(ARCH)-uclibc/uImage-armada-xp-linksys-mamba;

	cp $(ARCH)-uclibc/zImage $(ARCH)-uclibc/zImage-armada-385-linksys-caiman;
	cat $(LINUXDIR)/arch/arm/boot/dts/armada-385-linksys-caiman.dtb >> $(ARCH)-uclibc/zImage-armada-385-linksys-caiman;
	mkimage -A arm -O linux -T kernel -a 0x00008000 -C none -e 0x00008000 -n 'DD-WRT' -d $(ARCH)-uclibc/zImage-armada-385-linksys-caiman $(ARCH)-uclibc/uImage-armada-385-linksys-caiman;

	cp $(ARCH)-uclibc/zImage $(ARCH)-uclibc/zImage-armada-385-linksys-cobra;
	cat $(LINUXDIR)/arch/arm/boot/dts/armada-385-linksys-cobra.dtb >> $(ARCH)-uclibc/zImage-armada-385-linksys-cobra;
	mkimage -A arm -O linux -T kernel -a 0x00008000 -C none -e 0x00008000 -n 'DD-WRT' -d $(ARCH)-uclibc/zImage-armada-385-linksys-cobra $(ARCH)-uclibc/uImage-armada-385-linksys-cobra;

	cp $(ARCH)-uclibc/zImage $(ARCH)-uclibc/zImage-armada-385-linksys-shelby;
	cat $(LINUXDIR)/arch/arm/boot/dts/armada-385-linksys-shelby.dtb >> $(ARCH)-uclibc/zImage-armada-385-linksys-shelby;
	mkimage -A arm -O linux -T kernel -a 0x00008000 -C none -e 0x00008000 -n 'DD-WRT' -d $(ARCH)-uclibc/zImage-armada-385-linksys-shelby $(ARCH)-uclibc/uImage-armada-385-linksys-shelby;

	cp $(ARCH)-uclibc/zImage $(ARCH)-uclibc/zImage-armada-385-linksys-rango;
	cat $(LINUXDIR)/arch/arm/boot/dts/armada-385-linksys-rango.dtb >> $(ARCH)-uclibc/zImage-armada-385-linksys-rango;
	mkimage -A arm -O linux -T kernel -a 0x00008000 -C none -e 0x00008000 -n 'DD-WRT' -d $(ARCH)-uclibc/zImage-armada-385-linksys-rango $(ARCH)-uclibc/uImage-armada-385-linksys-rango;

	cp $(ARCH)-uclibc/zImage $(ARCH)-uclibc/zImage-armada-385-linksys-venom;
	cat $(LINUXDIR)/arch/arm/boot/dts/armada-385-linksys-venom.dtb >> $(ARCH)-uclibc/zImage-armada-385-linksys-venom;
	mkimage -A arm -O linux -T kernel -a 0x00008000 -C none -e 0x00008000 -n 'DD-WRT' -d $(ARCH)-uclibc/zImage-armada-385-linksys-venom $(ARCH)-uclibc/uImage-armada-385-linksys-venom;


	cp $(ARCH)-uclibc/uImage-armada-xp-linksys-mamba $(ARCH)-uclibc/mvebu/ddwrt-mvebu-uImage-armada-xp-linksys-mamba;
	cp $(ARCH)-uclibc/uImage-armada-385-linksys-caiman $(ARCH)-uclibc/mvebu/ddwrt-mvebu-uImage-armada-385-linksys-caiman;
	cp $(ARCH)-uclibc/uImage-armada-385-linksys-cobra $(ARCH)-uclibc/mvebu/ddwrt-mvebu-uImage-armada-385-linksys-cobra;
	cp $(ARCH)-uclibc/uImage-armada-385-linksys-shelby $(ARCH)-uclibc/mvebu/ddwrt-mvebu-uImage-armada-385-linksys-shelby;
	cp $(ARCH)-uclibc/uImage-armada-385-linksys-rango $(ARCH)-uclibc/mvebu/ddwrt-mvebu-uImage-armada-385-linksys-rango;
	cp $(ARCH)-uclibc/uImage-armada-385-linksys-venom $(ARCH)-uclibc/mvebu/ddwrt-mvebu-uImage-armada-385-linksys-venom;
	
	#tools/wrt1900ac/mksquashfs4 $(TARGETDIR) $(ARCH)-uclibc/root.squashfs -nopad -noappend -root-owned -comp xz -sort tools/sort.txt -Xpreset 9 -Xe -Xlc 0 -Xlp 2 -Xpb 2 -Xbcj arm -b 256k -p '/dev d 755 0 0' -p '/dev/console c 600 0 0 5 1' -processors 1
	$(LINUXDIR)/scripts/squashfs/mksquashfs4 $(ARCH)-uclibc/target $(ARCH)-uclibc/root.squashfs -comp xz -sort tools/sort.txt -nopad  -root-owned -noappend -Xbcj arm -b 262144
#	$(LINUXDIR)/scripts/squashfs/mksquashfs-lzma $(ARCH)-uclibc/target $(ARCH)-uclibc/root.squashfs -noappend -root-owned -le
	tools/wrt1900ac/padjffs2 $(ARCH)-uclibc/root.squashfs 128
	
	#mkfs.ubifs -F -m 2048 -e 124KiB -c 4096 -x favor_lzo -X 10 -o $(ARCH)-uclibc/root.squashfs -d $(TARGETDIR)

	
	cp tools/wrt1900ac/ubinize.cfg $(ARCH)-uclibc
	cd $(ARCH)-uclibc && ../tools/wrt1900ac/ubinize -v -m 2048 -p 128KiB -s 512 -O 2048 -o root.squashfs.ubi ubinize.cfg && cd ..

	#cd $(ARCH)-uclibc && ../tools/wrt1900ac/ubinize -v -m 2048 -p 128KiB -s 2048 -o ddwrt-mvebu-armada-xp-mamba-squashfs-ubinized.bin ubinize.cfg && cd ..


ifeq ($(KERNELVERSION),6.1)
	( dd if=$(ARCH)-uclibc/uImage-armada-xp-linksys-mamba bs=4096k conv=sync; dd if=$(ARCH)-uclibc/root.squashfs.ubi bs=2048 conv=sync; ) > $(ARCH)-uclibc/ddwrt-mvebu-armada-xp-mamba-squashfs-factory.img
	( dd if=$(ARCH)-uclibc/uImage-armada-385-linksys-caiman bs=4096k conv=sync; dd if=$(ARCH)-uclibc/root.squashfs.ubi bs=2048 conv=sync; ) > $(ARCH)-uclibc/ddwrt-mvebu-armada-385-caiman-squashfs-factory.img
	( dd if=$(ARCH)-uclibc/uImage-armada-385-linksys-cobra bs=4096k conv=sync; dd if=$(ARCH)-uclibc/root.squashfs.ubi bs=2048 conv=sync; ) > $(ARCH)-uclibc/ddwrt-mvebu-armada-385-cobra-squashfs-factory.img
	( dd if=$(ARCH)-uclibc/uImage-armada-385-linksys-shelby bs=4096k conv=sync; dd if=$(ARCH)-uclibc/root.squashfs.ubi bs=2048 conv=sync; ) > $(ARCH)-uclibc/ddwrt-mvebu-armada-385-shelby-squashfs-factory.img
	( dd if=$(ARCH)-uclibc/uImage-armada-385-linksys-rango bs=6144k conv=sync; dd if=$(ARCH)-uclibc/root.squashfs.ubi bs=2048 conv=sync; ) > $(ARCH)-uclibc/ddwrt-mvebu-armada-385-rango-squashfs-factory.img
	( dd if=$(ARCH)-uclibc/zImage-armada-385-linksys-venom bs=4096k conv=sync; dd if=$(ARCH)-uclibc/root.squashfs.ubi bs=2048 conv=sync; ) > $(ARCH)-uclibc/ddwrt-mvebu-armada-385-venom-squashfs-factory.img
else
	( dd if=$(ARCH)-uclibc/uImage-armada-xp-linksys-mamba bs=3072k conv=sync; dd if=$(ARCH)-uclibc/root.squashfs.ubi bs=2048 conv=sync; ) > $(ARCH)-uclibc/ddwrt-mvebu-armada-xp-mamba-squashfs-factory.img
	( dd if=$(ARCH)-uclibc/uImage-armada-385-linksys-caiman bs=3072k conv=sync; dd if=$(ARCH)-uclibc/root.squashfs.ubi bs=2048 conv=sync; ) > $(ARCH)-uclibc/ddwrt-mvebu-armada-385-caiman-squashfs-factory.img
	( dd if=$(ARCH)-uclibc/uImage-armada-385-linksys-cobra bs=3072k conv=sync; dd if=$(ARCH)-uclibc/root.squashfs.ubi bs=2048 conv=sync; ) > $(ARCH)-uclibc/ddwrt-mvebu-armada-385-cobra-squashfs-factory.img
	( dd if=$(ARCH)-uclibc/uImage-armada-385-linksys-shelby bs=3072k conv=sync; dd if=$(ARCH)-uclibc/root.squashfs.ubi bs=2048 conv=sync; ) > $(ARCH)-uclibc/ddwrt-mvebu-armada-385-shelby-squashfs-factory.img
	( dd if=$(ARCH)-uclibc/uImage-armada-385-linksys-rango bs=6144k conv=sync; dd if=$(ARCH)-uclibc/root.squashfs.ubi bs=2048 conv=sync; ) > $(ARCH)-uclibc/ddwrt-mvebu-armada-385-rango-squashfs-factory.img
	( dd if=$(ARCH)-uclibc/zImage-armada-385-linksys-venom bs=3072k conv=sync; dd if=$(ARCH)-uclibc/root.squashfs.ubi bs=2048 conv=sync; ) > $(ARCH)-uclibc/ddwrt-mvebu-armada-385-venom-squashfs-factory.img
endif
	-./tools/trx_n -m 45000000 -o $(ARCH)-uclibc/ddwrt-linksys-wrt1900ac.bin $(ARCH)-uclibc/ddwrt-mvebu-armada-xp-mamba-squashfs-factory.img
	-./tools/trx_n -m 45000000 -o $(ARCH)-uclibc/ddwrt-linksys-wrt1900acv2.bin $(ARCH)-uclibc/ddwrt-mvebu-armada-385-cobra-squashfs-factory.img
	-./tools/trx_n -m 45000000 -o $(ARCH)-uclibc/ddwrt-linksys-wrt1200ac.bin $(ARCH)-uclibc/ddwrt-mvebu-armada-385-caiman-squashfs-factory.img
	-./tools/trx_n -m 45000000 -o $(ARCH)-uclibc/ddwrt-linksys-wrt1900acs.bin $(ARCH)-uclibc/ddwrt-mvebu-armada-385-shelby-squashfs-factory.img
	-./tools/trx_n -m 64000000 -o $(ARCH)-uclibc/ddwrt-linksys-wrt3200acm.bin $(ARCH)-uclibc/ddwrt-mvebu-armada-385-rango-squashfs-factory.img
	-./tools/trx_n -m 64000000 -o $(ARCH)-uclibc/ddwrt-linksys-wrt32X.bin $(ARCH)-uclibc/ddwrt-mvebu-armada-385-venom-squashfs-factory.img
	
#	rm -rf $(ARCH)-uclibc/venom/sysupgrade-armada-385-linksys-venom
#	mkdir -p $(ARCH)-uclibc/venom/sysupgrade-armada-385-linksys-venom
#	echo BOARD=armada-385-linksys-venom > $(ARCH)-uclibc/venom/sysupgrade-armada-385-linksys-venom/CONTROL
	./tools/venom/sysupgrade-tar.sh --board armada-385-linksys-venom --kernel $(ARCH)-uclibc/zImage-armada-385-linksys-venom --rootfs $(ARCH)-uclibc/root.squashfs $(ARCH)-uclibc/venom.tar
	echo '{  "supported_devices":["armada-385-linksys-venom"], "version": { "dist": "DD-WRT", "version": "SNAPSHOT", "revision": "r666666", "board": "mvebu" } }' | ./tools/fwtool/fwtool -I - $(ARCH)-uclibc/venom.tar

include rules/all.mk

.PHONY: all clean distclean mrproper install package
.PHONY: conf mconf oldconf kconf kmconf config menuconfig oldconfig
.PHONY: dummy fixkc libnet libpcap



