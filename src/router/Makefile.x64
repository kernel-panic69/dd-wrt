#
# Broadcom Linux Router Makefile
#
# Copyright 2001-2003, Broadcom Corporation
# All Rights Reserved.
#
# THIS SOFTWARE IS OFFERED "AS IS", AND BROADCOM GRANTS NO WARRANTIES OF ANY
# KIND, EXPRESS OR IMPLIED, BY STATUTE, COMMUNICATION OR OTHERWISE. BROADCOM
# SPECIFICALLY DISCLAIMS ANY IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A SPECIFIC PURPOSE OR NONINFRINGEMENT CONCERNING THIS SOFTWARE.
#
# $Id: Makefile,v 1.2 2005/09/26 11:06:58 seg Exp $
#

include .config
ifneq ($(wildcard ../cy_conf.mak),)
  include ../cy_conf.mak
endif

#
# Paths
#
OPENSER_MODULES := sl tm rr maxfwd usrloc registrar dbtext textops exec auth auth_db nathelper
OPENSER_MODULE_FILES := $(foreach module,$(OPENSER_MODULES),openser/modules/$(module)/$(module).so)
OPENSSL_NO_CIPHERS:= no-idea no-md2 no-mdc2 no-rc5 no-sha0 no-rmd160 no-aes192
OPENSSL_OPTIONS:= shared no-ec no-err no-fips no-hw no-krb5 no-threads zlib-dynamic no-engines

CONFIG_MUSL=y
#CONFIG_NOOPT=y

# Source bases

export PLATFORM LINUXDIR LIBDIR USRLIBDIR
export TOP := $(shell pwd)
export SRCBASE := $(shell (cd $(TOP)/.. && pwd -P))


# Set the HAL directory if you have the HAL sources

# Set the Atheros Rate Control directory if you have the proprietary rate control
export ATH_RATE=ath_rate/sample

#
# Cross-compile environment variables
#

# Build platform
export BUILD := x86_64-pc-linux-gnu
export HOSTCC := gcc

# uClibc wrapper
export ARCH:=$(PLATFORM)
ifeq ($(CONFIG_UCLIBC),y)
export PLATFORM := $(PLATFORM)-uclibc
endif

#export LINUXDIR := $(SRCBASE)/linux/linux.v24
ifeq ($(ARCH),mips)
export LINUXDIR := $(SRCBASE)/linux/brcm63xx/linux-2.6.17
endif
#ifeq ($(ARCH),i386)
#export LINUXDIR := $(SRCBASE)/linux/x86/linux-2.6.29
#endif
ifeq ($(ARCH),armeb)
export LINUXDIR := $(SRCBASE)/linux/xscale/linux-2.6.17
endif
ifeq ($(ARCH),mipsel)
export LINUXDIR := $(SRCBASE)/kernel/rb500/linux-2.6.17-rc5
endif

#export KERNELRELEASE = $(shell cat $(LINUXDIR)/.kernelrelease 2> /dev/null)
export KERNELRELEASE = $(shell cat $(LINUXDIR)/include/config/kernel.release 2> /dev/null)

#ifeq ($(PLATFORM),mipsel)
#export CROSS_COMPILE := mipsel-linux-
#export CONFIGURE := ./configure mipsel-linux --build=$(BUILD)
#export TOOLCHAIN := $(shell cd $(dir $(shell which $(CROSS_COMPILE)gcc))/../mipsel-linux && pwd -P)
#endif

#ifeq ($(PLATFORM),mipsel-uclibc)
export CROSS_COMPILE := x86_64-linux-uclibc-
export CONFIGURE := ./configure $(ARCH)-linux --build=$(BUILD)
export TOOLCHAIN := $(shell cd $(dir $(shell which $(CROSS_COMPILE)gcc))/.. && pwd -P)
#endif

#ifeq ($(CONFIG_BCMWPA2),y)
#export CFLAGS += -DBCMWPA2 
#endif

export BASEOPT:=-Os
#export ARCH:= mipsel

export LINUXVER = $(shell cat $(LINUXDIR)/include/config/kernel.release 2> /dev/null)

ifeq ($(ARCH),mipsel)
export COPTS:=$(BASEOPT) -pipe -mips32 -mtune=mips32 -funit-at-a-time 
endif
ifeq ($(ARCH),armeb)
export COPTS:=$(BASEOPT) -pipe -mtune=xscale -march=armv5te -Wa,-mcpu=xscale -mno-thumb-interwork -mno-thumb -funit-at-a-time 
endif
ifeq ($(ARCH),mips)
export COPTS:=$(BASEOPT) -pipe -mips32 -mtune=mips32 -funit-at-a-time 
endif
ifeq ($(ARCH),i386)
export COPTS:=$(BASEOPT) -pipe -march=i486 -mtune=i486 -fno-caller-saves -fno-plt
endif
ifeq ($(ARCH),x86_64)
export COPTS:=$(BASEOPT) -pipe -fno-caller-saves -D_FILE_OFFSET_BITS=64 -fno-plt -fcommon
endif

export CC := ccache $(CROSS_COMPILE)gcc
export CXX := ccache $(CROSS_COMPILE)g++
export AR := $(CROSS_COMPILE)gcc-ar
export AS := $(CROSS_COMPILE)as
export LD := $(CROSS_COMPILE)ld
export NM := $(CROSS_COMPILE)gcc-nm
export RANLIB := $(CROSS_COMPILE)gcc-ranlib
export STRIP := $(CROSS_COMPILE)strip
export SIZE := $(CROSS_COMPILE)size
export CFLAGS := $(COPTS)

#
# Install and target directories
#

export PLATFORMDIR := $(TOP)/$(PLATFORM)
export INSTALLDIR := $(PLATFORMDIR)/install
export TARGETDIR := $(PLATFORMDIR)/target

ifeq ($(PLATFORM),mipsel)
obj-y += libcrypto
endif
#
# Configuration
#
CONFIG_IPTABLES=y
include rules/configs.mk

obj-clean := $(foreach obj,$(obj-y) $(obj-n),$(obj)-clean)
obj-install := $(foreach obj,$(obj-y),$(obj)-install)
obj-distclean := $(foreach obj,$(obj-y) $(obj-n),$(obj)-distclean)

#
# Basic rules
#


all: install_headers build_date clean_target $(obj-y) $(LINUXDIR)/.config kernel

build_date:
	echo "#define BUILD_DATE \"$(shell date +%D)\"" > ../../opt/build.h 
	echo "CONFIG_MUSL=y" >> .config 

include kernel-features.mk
include common.mk

kernel:
        # Also build kernel
	# Also build kernel
	cp $(LINUXDIR)/.config_x64 $(LINUXDIR)/.config
ifeq ($(CONFIG_ISOFS),y)
	cp $(LINUXDIR)/.config_isofs $(LINUXDIR)/.config
endif
	$(kernelfeatures)
	make -C $(LINUXDIR) oldconfig
	$(MAKE) -f Makefile.x64 kernel-relink-prep MAKEEXT=x64 KBUILD_TARGETS="bzImage"
	$(MAKE) -f Makefile.x64 kernel-relink MAKEEXT=x64 KBUILD_TARGETS="bzImage"
	
#	cat $(LINUXDIR)/vmlinus | lzma e -si -so -eos -lc1 -lp2 -pb2 > lzma-loader/rb500/vmlinux.lzma
#	make -C lzma-loader/rb500 clean
#	make -C lzma-loader/rb500 
#	cp lzma-loader/rb500/lzma.elf $(ARCH)-uclibc/vmlinux


strip:
	export STRIP_KMOD="$(LINUXDIR)/scripts/strip-kmod.sh" && \
	export STRIP="$(TOP)/sstrip/sstrip -z" && \
	$(LINUXDIR)/scripts/rstrip.sh $(TARGETDIR)



install package: clean_target $(filter-out lib.$(ARCH)-install,$(obj-install)) $(LINUXDIR)/.config
        # Install binaries into target directory
	# Install binaries into target directory
#	make -C viarhine clean
#	make -C viarhine	
	#umount -f $(TARGETDIR)
	#dd if=/dev/zero of=mipsel-uclibc/root.fs bs=1024 count=27392
	#mke2fs -F -b 1024 mipsel-uclibc/root.fs
	#mkfs.ext3 -F -b 1024 mipsel-uclibc/root.fs
	install -d $(TARGETDIR)
	#mount mipsel-uclibc/root.fs -o loop=/dev/loop1 $(TARGETDIR)
#	$(ARCH)-linux-strip $(LINUXDIR)/vmlinux -o $(ARCH)-uclibc/vmlinux
#	cp $(LINUXDIR)/vmlinus mipsel-uclibc/vmlinux
#	gunzip -c base.img.gz>image.img
#	../tools/write $(ARCH)-uclibc/vmlinux image.img 16384
	#dd if=$(LINUXDIR)/vmlinux of=/dev/loop0 bs=512 seek=32
	for dir in $(wildcard $(patsubst %,$(INSTALLDIR)/%,$(obj-y))) ; do \
	    (cd $${dir} && tar cpf - .) | (cd $(TARGETDIR) && tar xpf -) \
	done
	mkdir -p $(ARCH)-uclibc/target/etc/config
	mkdir -p $(ARCH)-uclibc/target/etc/kaid
	mkdir -p $(ARCH)-uclibc/target/etc/langpack
	cd  $(ARCH)-uclibc/target/lib
#	ln -s libgcc_s.so.1 libgcc_s.so
#	cd ../../../../../opt
	cp ./opt/etc/config/* $(ARCH)-uclibc/target/etc/config
	cp ./opt/usr/lib/smb.conf $(ARCH)-uclibc/target/usr/lib
	ln -sf ../tmp/smbshare $(ARCH)-uclibc/target/www/smb

	# optimize the crypto library by removing unneeded symbols
	#[ ! -d libcrypto ] || $(MAKE) -C libcrypto optimize
	#[ ! -d libcrypto ] || $(MAKE) -C libcrypto optimize
	# Install (and possibly optimize) C library
#	$(MAKE) -f Makefile.x86 lib.i486-install
	# optimize the others library by removing unneeded symbols
	$(MAKE) -f Makefile.x64 optimize-lib
	# Install modules into filesystem
	if grep -q "CONFIG_MODULES=y" $(LINUXDIR)/.config ; then \
	    $(MAKE) -C $(LINUXDIR) modules_install MAKE=make DEPMOD=/bin/true INSTALL_MOD_PATH=$(TARGETDIR) ; \
	fi
ifeq ($(CONFIG_MADWIFI),y)
	rm -rf $(TARGETDIR)/lib/modules/$(KERNELRELEASE)/kernel/drivers/net/wl
endif
#	mkdir -p $(TARGETDIR)/lib/modules/2.4.32/kernel/drivers/net/ctmisc
#	cp ../wl/ctmisc/ctmisc.o $(TARGETDIR)/lib/modules/2.4.32/kernel/drivers/net/ctmisc
	##not used yet
	#mkdir -p $(TARGETDIR)/lib/modules/2.4.32-rc3/kernel/drivers/net/switch
	#cp ./switch/switch-core.o $(TARGETDIR)/lib/modules/2.4.32-rc3/kernel/drivers/net/switch
	#mkdir -p $(TARGETDIR)/lib/modules/2.4.32-rc3/kernel/drivers/net/switch
#	cp ./viarhine/via-rhine.o $(TARGETDIR)/lib/modules/2.4.32/kernel/drivers/net

	#mkdir -p $(TARGETDIR)/lib/modules/2.4.32-rc3/kernel/drivers/net/switch
	#cp ./switch/switch-adm.o $(TARGETDIR)/lib/modules/2.4.32-rc3/kernel/drivers/net/switch
	#cp lib.i486/libgcc_s.so.1 $(TARGETDIR)/lib
	#mkdir -p $(TARGETDIR)/lib/modules/2.4.32-rc3/kernel/drivers/net/switch
	#cp ./switch/switch-robo.o $(TARGETDIR)/lib/modules/2.4.32-rc3/kernel/drivers/net/switch
	
	#mkdir -p $(TARGETDIR)/lib/modules/2.4.32-rc1/kernel/drivers/net/et
	#cp ../et/linux/et.o $(TARGETDIR)/lib/modules/2.4.32-rc1/kernel/drivers/net/et
	
	#mkdir -p $(TARGETDIR)/lib/modules/2.4.32-rc3/kernel/drivers/net/et.4702
	#cp ../et.4702/linux/4702et.o $(TARGETDIR)/lib/modules/2.4.32-rc3/kernel/drivers/net/et.4702
	# robo switch
	#mkdir -p $(TARGETDIR)/lib/modules/2.4.32-rc3/kernel/drivers/net/robo
	#cp ../robo/linux/robo.o $(TARGETDIR)/lib/modules/2.4.32-rc3/kernel/drivers/net/robo
	
	find $(TARGETDIR) -name "wl_*.o"  | xargs rm -rf
	# quick n dirty - stuff Nikki's module where it belongs
	#mkdir $(TARGETDIR)/lib/modules/2.4.32-rc3/kernel/drivers/net/adm6996
#	if [ "$(CONFIG_MMC)" = "y" ] ; then \
#	mkdir $(TARGETDIR)/lib/modules/2.4.32/kernel/fs/mmc ; \
#	cp mmc/mmc.o $(TARGETDIR)/lib/modules/2.4.32/kernel/fs/mmc ; \
#	fi ; 
#ifeq ($(CONFIG_MSSID),y)
#	cp adm6996.v24/adm6996.o $(TARGETDIR)/lib/modules/2.4.32-rc3/kernel/drivers/net/adm6996/adm6996.o
#else	
#	cp adm6996/adm6996.o $(TARGETDIR)/lib/modules/2.4.32-rc3/kernel/drivers/net/adm6996/adm6996.o
#endif
ifneq ($(CONFIG_USB),y)
	rm -rf $(TARGETDIR)/lib/modules/$(LINUXVER)/kernel/drivers/usb/class
	rm -rf $(TARGETDIR)/lib/modules/$(LINUXVER)/kernel/drivers/usb/core
	rm -rf $(TARGETDIR)/lib/modules/$(LINUXVER)/kernel/drivers/usb/host
	rm -rf $(TARGETDIR)/lib/modules/$(LINUXVER)/kernel/drivers/usb/storage
	rm -rf $(TARGETDIR)/lib/modules/$(LINUXVER)/kernel/drivers/scsi
	rm -rf $(TARGETDIR)/lib/modules/$(LINUXVER)/kernel/fs/ext2
#	rm -rf $(TARGETDIR)/lib/modules/$(LINUXVER)/kernel/fs/ext3
	rm -rf $(TARGETDIR)/lib/modules/$(LINUXVER)/kernel/fs/fat
#	rm -rf $(TARGETDIR)/lib/modules/$(LINUXVER)/kernel/fs/jbd
	rm -rf $(TARGETDIR)/lib/modules/$(LINUXVER)/kernel/fs/msdos
	rm -rf $(TARGETDIR)/lib/modules/$(LINUXVER)/kernel/fs/vfat
	rm -rf $(TARGETDIR)/lib/modules/$(LINUXVER)/kernel/fs/xfs
#	rm -f $(TARGETDIR)/lib/modules/$(LINUXVER)/kernel/fs/mbcache.ko
endif
ifneq ($(CONFIG_USB_ADVANCED),y)
	rm -rf $(TARGETDIR)/lib/modules/$(LINUXVER)/kernel/drivers/usb/serial
	rm -rf $(TARGETDIR)/lib/modules/$(LINUXVER)/kernel/fs/ext3
	rm -rf $(TARGETDIR)/lib/modules/$(LINUXVER)/kernel/fs/ext4
	rm -rf $(TARGETDIR)/lib/modules/$(LINUXVER)/kernel/fs/btrfs
	rm -rf $(TARGETDIR)/lib/modules/$(LINUXVER)/kernel/fs/jbd	
	rm -rf $(TARGETDIR)/lib/modules/$(LINUXVER)/kernel/fs/jbd2	
endif
ifneq ($(CONFIG_NTFS3G),y)
	rm -rf $(TARGETDIR)/lib/modules/$(LINUXVER)/kernel/fs/fuse
endif
ifneq ($(CONFIG_USB),y)
ifneq ($(CONFIG_SAMBA),y)
	rm -rf $(TARGETDIR)/lib/modules/$(LINUXVER)/kernel/fs/nls
endif
endif
ifneq ($(CONFIG_IPV6),y)
	rm -rf $(TARGETDIR)/lib/modules/$(LINUXVER)/kernel/net/ipv6
endif
ifneq ($(CONFIG_3G),y)
	rm -rf $(TARGETDIR)/lib/modules/$(LINUXVER)/kernel/drivers/net/usb
endif
ifneq ($(CONFIG_SAMBA),y)
	rm -rf $(TARGETDIR)/lib/modules/$(LINUXVER)/kernel/fs/cifs
endif
ifneq ($(CONFIG_JFFS2),y)
	rm -rf $(TARGETDIR)/lib/modules/$(LINUXVER)/kernel/fs/jffs2
endif

	rm -f $(TARGETDIR)/lib/modules/$(KERNELRELEASE)/build
	rm -f $(TARGETDIR)/lib/modules/$(KERNELRELEASE)/source
	
	
	
        # Prepare filesystem
	cd $(TARGETDIR) && $(TOP)/misc/rootprep.sh
        # Make sure mksquashfs-2.0 is used
#	$(MAKE) -C $(LINUXDIR)/scripts/squashfs mksquashfs
	cd $(TARGETDIR)  &&  find . -iname "CVS" | xargs rm -rf
	cd $(TARGETDIR)  &&  find . -iname ".svn" | xargs rm -rf
#	cp viarhine/pci-scan.o $(TARGETDIR)/lib/modules/2.4.32/kernel/drivers/net/pci-scan.o
#	cp -f test/* $(TARGETDIR)/lib/modules/2.4.33-pre1/kernel/drivers/net
	
#	mknod $(TARGETDIR)/dev/cfa b 13 0
#	mknod $(TARGETDIR)/dev/cfa1 b 13 1
#	mknod $(TARGETDIR)/dev/cfa2 b 13 2
#	mknod $(TARGETDIR)/dev/cfa3 b 13 3
#	mknod $(TARGETDIR)/dev/cfa4 b 13 4
#	umount $(TARGETDIR)
#find $(TARGETDIR)/lib/modules -name *.ko -exec mipsel-linux-strip --strip-unneeded --remove-section=.comment {} +		
	#e2fsck -y -f $(ARCH)-uclibc/root.fs
	-find $(TARGETDIR)/lib/modules/$(KERNELRELEASE)/kernel -name *.ko -exec mv {} $(TARGETDIR)/lib/modules/$(KERNELRELEASE) \;
	-find $(TARGETDIR)/lib/modules/$(KERNELRELEASE)/net -name *.ko -exec mv {} $(TARGETDIR)/lib/modules/$(KERNELRELEASE) \;
	-find $(TARGETDIR)/lib/modules/$(KERNELRELEASE)/extra -name *.ko -exec mv {} $(TARGETDIR)/lib/modules/$(KERNELRELEASE) \;
	rm -rf $(TARGETDIR)/lib/modules/$(KERNELRELEASE)/extra
	rm -rf $(TARGETDIR)/lib/modules/$(KERNELRELEASE)/kernel
	rm -rf $(TARGETDIR)/lib/modules/$(KERNELRELEASE)/net
	#e2fsck -y -f $(ARCH)-uclibc/root.fs
	./busybox/examples/depmod.pl -F $(LINUXDIR)/System.map -b $(ARCH)-uclibc/target/lib/modules
	#cd $(TARGETDIR)
#	tar --directory=$(TARGETDIR) --remove-files -cvvjf $(TARGETDIR)/etc/local.tar.bz2 usr/local
	rm -rf $(TARGETDIR)/usr/local
	mkdir $(TARGETDIR)/usr/local
ifeq ($(CONFIG_KAID),y)
	cp kaid/kaid $(TARGETDIR)/usr/sbin
endif
#	mv $(TARGETDIR)/usr/lib/services.so $(TARGETDIR)/lib
	export STRIP_KMOD="$(LINUXDIR)/scripts/strip-kmod.sh" && \
	export STRIP="sstrip" && \
	$(LINUXDIR)/scripts/rstrip.sh $(TARGETDIR)

	cd grub && ./configure --host=i386-linux --target=i386-linux CC="/xfs/toolchains/staging_dir_i386.4.2.1/bin/i386-linux-gcc" LDFLAGS="-static" CFLAGS="-Os -DNEED_PRINTF"
	make -C grub clean DESTDIR=$(INSTALLDIR)/grub	
	make -C grub DESTDIR=$(INSTALLDIR)/grub	
	make -C grub install DESTDIR=$(INSTALLDIR)/grub	
	$(TOP)/../../tools/removewhitespace.sh $(TOP)/../../tools $(TARGETDIR)/etc/config
#	mksquashfs $(ARCH)-uclibc/target $(ARCH)-uclibc/root.fs -comp xz -sort tools/sort.txt -root-owned -noappend -Xbcj x86
	$(LINUXDIR)/scripts/squashfs/mksquashfs4 $(ARCH)-uclibc/target $(ARCH)-uclibc/root.fs -comp xz -sort tools/sort.txt -root-owned -noappend -Xbcj x86 -b 262144
#	$(LINUXDIR)/scripts/squashfs/mksquashfs-lzma $(ARCH)-uclibc/target $(ARCH)-uclibc/root.fs -noappend -root-owned -le -b 262144 -nopad
	mkfs.jffs2 --pad --big-endian --squash -e 0x20000 -o $(ARCH)-uclibc/dd-wrt.jffs2 -d $(ARCH)-uclibc/target
	mkdir -p $(ARCH)-uclibc/root.grub/boot/grub
	cp \
		$(INSTALLDIR)/grub/usr/local/lib/grub/i386-pc/stage1 \
		$(INSTALLDIR)/grub/usr/local/lib/grub/i386-pc/stage2 \
		$(INSTALLDIR)/grub/usr/local/lib/grub/i386-pc/e2fs_stage1_5 \
		$(ARCH)-uclibc/root.grub/boot/grub/
	cp grub/menu_serial.lst $(ARCH)-uclibc/root.grub/boot/grub/menu.lst
	cp $(LINUXDIR)/arch/x86_64/boot/bzImage $(ARCH)-uclibc/root.grub/boot/vmlinuz

	-PATH="$(INSTALLDIR)/grub/usr/local/sbin:$(INSTALLDIR)/grub/usr/local/bin:$(PATH)" ./gen_image.sh $(ARCH)-uclibc/dd-wrt_serial.image.src 32 $(ARCH)-uclibc/root.grub 500 $(ARCH)-uclibc/root.fs 128
	-PATH="$(INSTALLDIR)/grub/usr/local/sbin:$(INSTALLDIR)/grub/usr/local/bin:$(PATH)" ./gen_image.sh $(ARCH)-uclibc/dd-wrt_serial_2GB.image.src 32 $(ARCH)-uclibc/root.grub 500 $(ARCH)-uclibc/root.fs 1780
	cp grub/menu_vga.lst $(ARCH)-uclibc/root.grub/boot/grub/menu.lst
	-PATH="$(INSTALLDIR)/grub/usr/local/sbin:$(INSTALLDIR)/grub/usr/local/bin:$(PATH)" ./gen_image.sh $(ARCH)-uclibc/dd-wrt_vga.image.src 32 $(ARCH)-uclibc/root.grub 500 $(ARCH)-uclibc/root.fs 128
	-PATH="$(INSTALLDIR)/grub/usr/local/sbin:$(INSTALLDIR)/grub/usr/local/bin:$(PATH)" ./gen_image.sh $(ARCH)-uclibc/dd-wrt_vga_2GB.image.src 32 $(ARCH)-uclibc/root.grub 500 $(ARCH)-uclibc/root.fs 1780

	dd if=$(ARCH)-uclibc/dd-wrt_vga.image.src of=$(ARCH)-uclibc/dd-wrt_vga.image bs=1048576 conv=sync
	dd if=$(ARCH)-uclibc/dd-wrt_serial.image.src of=$(ARCH)-uclibc/dd-wrt_serial.image bs=1048576 conv=sync
	dd if=$(ARCH)-uclibc/dd-wrt_vga_2GB.image.src of=$(ARCH)-uclibc/dd-wrt_vga_2GB.image bs=1048576 conv=sync
	dd if=$(ARCH)-uclibc/dd-wrt_serial_2GB.image.src of=$(ARCH)-uclibc/dd-wrt_serial_2GB.image bs=1048576 conv=sync

	./tools/wrap $(ARCH)-uclibc/dd-wrt_vga.image $(ARCH)-uclibc/dd-wrt-vga-webupgrade.bin
	./tools/wrap $(ARCH)-uclibc/dd-wrt_serial.image $(ARCH)-uclibc/dd-wrt-serial-webupgrade.bin
	./tools/wrap $(ARCH)-uclibc/dd-wrt_vga_2GB.image $(ARCH)-uclibc/dd-wrt-vga-webupgrade_2GB.bin
	./tools/wrap $(ARCH)-uclibc/dd-wrt_serial_2GB.image $(ARCH)-uclibc/dd-wrt-serial-webupgrade_2GB.bin
	cd grub-efi && ./makeefi.sh

	./tools/wrap grub-efi/efi-vga.img $(ARCH)-uclibc/dd-wrt-vga-efi-webupgrade.bin
	./tools/wrap grub-efi/efi.img $(ARCH)-uclibc/dd-wrt-serial-efi-webupgrade.bin
	./tools/wrap grub-efi/efi-vga-big.img $(ARCH)-uclibc/dd-wrt-vga-efi-webupgrade_2GB.bin
	./tools/wrap grub-efi/efi-big.img $(ARCH)-uclibc/dd-wrt-serial-efi-webupgrade_2GB.bin

#	mkdir -p $(TARGETDIR)/boot/grub
#	cp $(INSTALLDIR)/grub/usr/local/lib/grub/i386-pc/stage2_eltorito $(TARGETDIR)/boot/grub
#	mkisofs -R -b boot/grub/stage2_eltorito -no-emul-boot  -boot-load-size 4 -boot-info-table -o grub.iso $(TARGETDIR)
	
#endif
#
# Configuration rules
#
include rules/all.mk

.PHONY: all clean distclean mrproper install package
.PHONY: conf mconf oldconf kconf kmconf config menuconfig oldconfig
.PHONY: dummy fixkc libnet libpcap



